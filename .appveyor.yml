environment:
  global:
    PROJECT_SPEC: "digital_rf==2.6.0b4"
    PACKAGE_NAME: "digital_rf"
    # need same HDF5 version that is bundled with h5py wheel
    HDF5_DEP: "hdf5=1.10.1"
    H5PY_DEP: "h5py>=2.7.1"
    NUMPY_DEP: "numpy=1.8"
    BUILD_DEP: "pkgconfig setuptools wheel"
    TEST_DEP: "pytest"
    # Note: TWINE_USERNAME and TWINE_PASSWORD are set in AppVeyor settings

  matrix:
    - CONDA_INSTALL_LOCN: "C:\\Miniconda"
      CONDA_PY: "27"
      PYTHON_VERSION: "2.7"

    - CONDA_INSTALL_LOCN: "C:\\Miniconda-x64"
      CONDA_PY: "27"
      PYTHON_VERSION: "2.7"

    - CONDA_INSTALL_LOCN: "C:\\Miniconda35"
      CONDA_PY: "35"
      PYTHON_VERSION: "3.5"
      NUMPY_DEP: "numpy=1.9"

    - CONDA_INSTALL_LOCN: "C:\\Miniconda35-x64"
      CONDA_PY: "35"
      PYTHON_VERSION: "3.5"
      NUMPY_DEP: "numpy=1.9"

    - CONDA_INSTALL_LOCN: "C:\\Miniconda36"
      CONDA_PY: "36"
      PYTHON_VERSION: "3.6"
      NUMPY_DEP: "numpy=1.11"

    - CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      CONDA_PY: "36"
      PYTHON_VERSION: "3.6"
      NUMPY_DEP: "numpy=1.11"

matrix:
    fast_finish: true

install:
    # fetch and unpack python sources
    - "pip download --no-deps --no-binary :all: -d dl_tmp %PROJECT_SPEC%"
    - 7z x dl_tmp\* -so | 7z x -si -ttar -oarch_tmp
    - mkdir src
    - for /d %%A in (arch_tmp\*) do (robocopy "%%A" src /MIR /NP) ^& IF %ERRORLEVEL% LEQ 3 exit /B 0

    # set up build environment with conda
    - set CPU_COUNT=2
    - set PYTHONUNBUFFERED=1
    - call "%CONDA_INSTALL_LOCN%\Scripts\activate.bat"
    # update conda
    - conda update --yes --quiet -n root conda
    # add channels
    - conda config --add channels conda-forge
    - conda config --set auto_update_conda false
    # needed for building extensions in python 2.7 x64 with cmake
    - conda install --yes --quiet vs2008_express_vc_python_patch
    - call setup_x64
    # info for debugging
    - conda info

    # make sure we have the newest package versions
    - python -m pip install -U pip

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
    # Install the dependencies of the project.
    - conda install --yes %HDF5_DEP% %NUMPY_DEP% %BUILD_DEP%
    # Build wheel
    - set HDF5_ROOT=%CONDA_PREFIX%\Library
    # add required external libraries to wheel package using setup.py environment variable
    # (not necessary for now since h5py bundles hdf5.dll, since we require
    #  h5py it will use that version)
    #- set DRF_PACKAGE_EXTERNAL_LIBS=%CONDA_PREFIX%\Library\bin\hdf5.dll;%CONDA_PREFIX%\Library\bin\zlib.dll
    # require the specific h5py version that we know works
    - set DRF_H5PY_SPEC=%H5PY_DEP%
    - python -m pip wheel -v -w wheelhouse --no-deps .\src
    - dir wheelhouse

test_script:
    # create test env
    - conda create --yes -n test_env python=%PYTHON_VERSION%
    - activate test_env
    - where python
    - python -m pip install %TEST_DEP%

    # install from wheel
    - pwsh: ls wheelhouse\*.whl | % { python -m pip install $_ }

    # run the tests
    - pytest --maxfail=10 src

artifacts:
    - path: "wheelhouse\\*"

on_success:
    # Upload wheels to PyPI
    - python -m pip install twine
    - python -m twine upload --skip-existing wheelhouse\*
