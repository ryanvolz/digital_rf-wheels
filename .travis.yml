env:
    global:
        - PACKAGE_NAME="digital_rf"
        - PACKAGE_VERSION="2.6.6"
        - BUILD_NUMBER="0"
        # pip dependencies to _build_ your project
        - BUILD_DEPENDS="oldest-supported-numpy pkgconfig setuptools wheel"
        # pip dependencies to _test_ your project, beyond the setup.py install
        # dependencies and potentially including specific versions
        - TEST_DEPENDS="oldest-supported-numpy pytest"
        # Note: TWINE_USERNAME and TWINE_PASSWORD are set in Travis settings

language: generic
services: docker

matrix:
  include:
    # add osx first into the queue as they have lower parallelism
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.6
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.7
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.8
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.9
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.9

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install
    # fetch and unpack source package
    - source config.sh
    - fetch_unpack_pypi_source $PACKAGE_NAME $PACKAGE_VERSION

install:
    - build_wheel $SRC_DIR
    - WHEEL_FILE=$(abspath $(ls "$WHEEL_SDIR/$PACKAGE_NAME-$PACKAGE_VERSION*"))
    - echo $WHEEL_FILE
    - wheel_add_build_number $PACKAGE_NAME $PACKAGE_VERSION $WHEEL_FILE $BUILD_NUMBER

script:
    # run tests
    - install_run $PLAT

after_success:
    # Upload wheels to PyPI
    - python -m pip install --upgrade pyOpenSSL
    - python -m pip install twine
    - python -m twine upload --skip-existing $WHEEL_SDIR/*
